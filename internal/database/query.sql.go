// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createIdentity = `-- name: CreateIdentity :one
INSERT INTO "auth.identities" (id, user_id, provider, provider_id, credentials)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, provider, provider_id, credentials, created_at, updated_at
`

type CreateIdentityParams struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
	Provider    string    `json:"provider"`
	ProviderID  string    `json:"provider_id"`
	Credentials []byte    `json:"credentials"`
}

func (q *Queries) CreateIdentity(ctx context.Context, arg CreateIdentityParams) (AuthIdentity, error) {
	row := q.db.QueryRow(ctx, createIdentity,
		arg.ID,
		arg.UserID,
		arg.Provider,
		arg.ProviderID,
		arg.Credentials,
	)
	var i AuthIdentity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderID,
		&i.Credentials,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "auth.users" (id, roles)
VALUES ($1, $2)
RETURNING id, roles, created_at, updated_at
`

type CreateUserParams struct {
	ID    uuid.UUID `json:"id"`
	Roles []string  `json:"roles"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (AuthUser, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Roles)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Roles,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIdentityByProvider = `-- name: GetIdentityByProvider :one
SELECT id, user_id, provider, provider_id, credentials, created_at, updated_at FROM "auth.identities"
WHERE provider = $1 AND provider_id = $2
LIMIT 1
`

type GetIdentityByProviderParams struct {
	Provider   string `json:"provider"`
	ProviderID string `json:"provider_id"`
}

func (q *Queries) GetIdentityByProvider(ctx context.Context, arg GetIdentityByProviderParams) (AuthIdentity, error) {
	row := q.db.QueryRow(ctx, getIdentityByProvider, arg.Provider, arg.ProviderID)
	var i AuthIdentity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderID,
		&i.Credentials,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, roles, created_at, updated_at FROM "auth.users"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (AuthUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Roles,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
